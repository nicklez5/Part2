   const vmt_QS
      :QS.Start
      :QS.Sort
      :QS.Print
      :QS.Init

   func Main()
      t.0 = HeapAllocZ(12)
      [t.0] = :vmt_QS
      if t.0 goto :null1
      Error("null pointer")
      null1:
      t.1 = [t.0]
      t.1 = [t.1+0]
      t.2 = call t.1(t.0 10)
      PrintIntS(t.2)
      ret

   func QS.Start(this sz)
      t.3 = [this]
      t.3 = [t.3+12]
      t.4 = call t.3(this sz)
      aux01 = t.4
      t.5 = [this]
      t.5 = [t.5+8]
      t.6 = call t.5(this)
      aux01 = t.6
      PrintIntS(9999)
      t.6 = size
      t.7 = Sub(t.6 1)
      aux01 = t.7
      t.8 = [this]
      t.8 = [t.8+4]
      t.9 = call t.8(this  0 aux01)
      aux01 = t.9
      t.10 = [this]
      t.10 = [t.10+8]
      t.11 = call t.10(this)
      aux01 = t.11
      ret 0

   func QS.Sort(this left right)
      t = 0
      t.11 = LtS(left right)
      t.11 = Eq(t.11 1)
      if0 t.11 goto :if6_else
         t.11 = number
         t.12 = [null]
         t.12 = Lt(right t.12)
         if t.12 goto :bound8
            Error("array index out of bounds")
            goto :bound_end8
         bound8:
            t.12 = MulS(right 4)
            t.12 = Add(t.12 null)
            t.13 = [t.12+4]
         bound_end8:
         v = t.13
         t.14 = Sub(left 1)
         i = t.14
         j = right
         cont01 = 1
         t.14 = Eq(cont01 1)
         if0 t.14 goto :if13_end
            cont02 = 1
            t.14 = Eq(cont02 1)
            if0 t.14 goto :if16_end
               t.15 = Add(i 1)
               i = t.15
               t.15 = number
               t.16 = [null]
               t.16 = Lt(i t.16)
               if t.16 goto :bound19
                  Error("array index out of bounds")
                  goto :bound_end19
               bound19:
                  t.16 = MulS(i 4)
                  t.16 = Add(t.16 null)
                  t.17 = [t.16+4]
               bound_end19:
               aux03 = t.17
               t.17 = LtS(aux03 v)
               t.18 = Eq(t.17 0)
               if0 t.18 goto :if22_else
                  t.17 = 0
                  goto :if22_end
               if22_else:
                  t.17 = 1
               if22_end:
               t.18 = Eq(t.17 1)
               if0 t.18 goto :if23_else
                  cont02 = 0
                  goto :if23_end
               if23_else:
                  cont02 = 1
                  if23_end:
                  goto :if16_end
               if16_end:
               cont02 = 1
               t.18 = Eq(cont02 1)
               if0 t.18 goto :if26_end
                  t.19 = Sub(j 1)
                  j = t.19
                  t.19 = number
                  t.20 = [null]
                  t.20 = Lt(j t.20)
                  if t.20 goto :bound29
                     Error("array index out of bounds")
                     goto :bound_end29
                  bound29:
                     t.20 = MulS(j 4)
                     t.20 = Add(t.20 null)
                     t.21 = [t.20+4]
                  bound_end29:
                  aux03 = t.21
                  t.21 = LtS(v aux03)
                  t.22 = Eq(t.21 0)
                  if0 t.22 goto :if32_else
                     t.21 = 0
                     goto :if32_end
                  if32_else:
                     t.21 = 1
                  if32_end:
                  t.22 = Eq(t.21 1)
                  if0 t.22 goto :if33_else
                     cont02 = 0
                     goto :if33_end
                  if33_else:
                     cont02 = 1
                     if33_end:
                     goto :if26_end
                  if26_end:
                  t.22 = number
                  t.23 = [null]
                  t.23 = Lt(i t.23)
                  if t.23 goto :bound35
                     Error("array index out of bounds")
                     goto :bound_end35
                  bound35:
                     t.23 = MulS(i 4)
                     t.23 = Add(t.23 null)
                     t.24 = [t.23+4]
                  bound_end35:
                  t = t.24
                  t.25 = Add(i 1)
                  t.25 = LtS(j t.25)
                  t.25 = Eq(t.25 1)
                  if0 t.25 goto :if41_else
                     cont01 = 0
                     goto :if41_end
                  if41_else:
                     cont01 = 1
                     if41_end:
                     goto :if13_end
                  if13_end:
                  t.26 = [this]
                  t.26 = [t.26+4]
                  t.28 = Sub(i 1)
                  t.28 = call t.26(this  left t.28)
                  nt = t.28
                  t.29 = [this]
                  t.29 = [t.29+4]
                  t.31 = Add(i 1)
                  t.31 = call t.29(this  t.31 right)
                  nt = t.31
                  goto :if6_end
               if6_else:
                  nt = 0
                  if6_end:
                  ret 0

               func QS.Print(this)
                  j = 0
                  t.31 = size
                  t.31 = LtS(j t.31)
                  t.31 = Eq(t.31 1)
                  if0 t.31 goto :if52_end
                     t.31 = number
                     t.32 = [null]
                     t.32 = Lt(j t.32)
                     if t.32 goto :bound54
                        Error("array index out of bounds")
                        goto :bound_end54
                     bound54:
                        t.32 = MulS(j 4)
                        t.32 = Add(t.32 null)
                        t.33 = [t.32+4]
                     bound_end54:
                     PrintIntS(t.33)
                     t.34 = Add(j 1)
                     j = t.34
                     goto :if52_end
                  if52_end:
                  ret 0

               func QS.Init(this sz)
                  t.34 = [this]
                  t.34 = [t.34 + 12]
                  t.34 = sz
                  t.34 = [this]
                  t.34 = [t.34 + 8]
                  t.35 = MulS(sz 4)
                  t.35 = Add(t.35 4)
                  t.36 = HeapAllocZ(t.35)
                  [t.36] = sz
                  if t.36 goto :null56
                     Error("null pointer")
                  null56:
                  t.34 = [t.36]
                  ret 0

