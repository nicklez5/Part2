   const vmt_LS
      :LS.Start
      :LS.Print
      :LS.Search
      :LS.Init

   func Main()
      t.0 = HeapAllocZ(12)
      [t.0] = :vmt_LS
      if t.0 goto :null1
      Error("null pointer")
      null1:
      t.1 = [t.0]
      t.1 = [t.1+0]
      t.2 = call t.1(t.0 10)
      PrintIntS(t.2)
      ret

   func LS.Start(this sz)
      t.3 = [this]
      t.3 = [t.3+12]
      t.4 = call t.3(this sz)
      aux01 = t.4
      t.5 = [this]
      t.5 = [t.5+4]
      t.6 = call t.5(this)
      aux02 = t.6
      PrintIntS(9999)
      t.7 = [this]
      t.7 = [t.7+8]
      t.8 = call t.7(this 8)
      PrintIntS(t.8)
      t.9 = [this]
      t.9 = [t.9+8]
      t.10 = call t.9(this 12)
      PrintIntS(t.10)
      t.11 = [this]
      t.11 = [t.11+8]
      t.12 = call t.11(this 17)
      PrintIntS(t.12)
      t.13 = [this]
      t.13 = [t.13+8]
      t.14 = call t.13(this 50)
      PrintIntS(t.14)
      ret 55

   func LS.Print(this)
      j = 1
      t.14 = size
      t.14 = LtS(j t.14)
      t.14 = Eq(t.14 1)
      if0 t.14 goto :if8_end
         t.14 = number
         t.15 = [null]
         t.15 = Lt(j t.15)
         if t.15 goto :bound10
            Error("array index out of bounds")
            goto :bound_end10
         bound10:
            t.15 = MulS(j 4)
            t.15 = Add(t.15 null)
            t.16 = [t.15+4]
         bound_end10:
         PrintIntS(t.16)
         t.17 = Add(j 1)
         j = t.17
         goto :if8_end
      if8_end:
      ret 0

   func LS.Search(this num)
      j = 1
      ls01 = 0
      ifound = 0
      t.17 = size
      t.17 = LtS(j t.17)
      t.17 = Eq(t.17 1)
      if0 t.17 goto :if12_end
         t.17 = number
         t.18 = [null]
         t.18 = Lt(j t.18)
         if t.18 goto :bound14
            Error("array index out of bounds")
            goto :bound_end14
         bound14:
            t.18 = MulS(j 4)
            t.18 = Add(t.18 null)
            t.19 = [t.18+4]
         bound_end14:
         aux01 = t.19
         t.20 = Add(num 1)
         aux02 = t.20
         t.20 = LtS(aux01 num)
         t.20 = Eq(t.20 1)
         if0 t.20 goto :if17_else
            nt = 0
            goto :if17_end
         if17_else:
            t.20 = LtS(aux01 aux02)
            t.21 = Eq(t.20 0)
            if0 t.21 goto :if19_else
               t.20 = 0
               goto :if19_end
            if19_else:
               t.20 = 1
            if19_end:
            t.21 = Eq(t.20 1)
            if0 t.21 goto :if20_else
               nt = 0
               goto :if20_end
            if20_else:
               ls01 = 1
               ifound = 1
               t.21 = size
               j = t.21
               if20_end:
               if17_end:
               t.22 = Add(j 1)
               j = t.22
               goto :if12_end
            if12_end:
            ret ifound

         func LS.Init(this sz)
            t.22 = [this]
            t.22 = [t.22 + 12]
            t.22 = sz
            t.22 = [this]
            t.22 = [t.22 + 8]
            t.23 = MulS(sz 4)
            t.23 = Add(t.23 4)
            t.24 = HeapAllocZ(t.23)
            [t.24] = sz
            if t.24 goto :null25
               Error("null pointer")
            null25:
            t.22 = [t.24]
            j = 1
            t.24 = size
            t.25 = Add(t.24 1)
            k = t.25
            t.25 = size
            t.25 = LtS(j t.25)
            t.25 = Eq(t.25 1)
            if0 t.25 goto :if26_end
               t.26 = MulS(2 j)
               aux01 = t.26
               t.27 = Sub(k 3)
               aux02 = t.27
               t.28 = Add(j 1)
               j = t.28
               t.29 = Sub(k 1)
               k = t.29
               goto :if26_end
            if26_end:
            ret 0

